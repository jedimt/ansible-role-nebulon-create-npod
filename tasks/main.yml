---
# tasks file for create_npod

- name: Get nPod group UUID
  nebulon.nebulon_on.neb_npod_group_info:
    name: "{{ npod_group }}"
  register: npod_group_name
  tags:
    - npod_group

- name: Get nPod template UUID
  nebulon.nebulon_on.neb_npod_template_info:
    name: "{{ npod_template }}"
  register: npod_template_name
  tags:
    - npod_template

- name: Set facts
  ansible.builtin.set_fact:
    npod_group_uuid: "{{ npod_group_name.npod_groups[0].uuid }}"
    npod_template_uuid: "{{ npod_template_name.npod_templates[-1].uuid }}"
  tags:
    - npod_template

- name: Prepare SPU specific info from inventory
  ansible.builtin.set_fact:
    spu_serials: "{{ groups.servers | map('extract', hostvars, 'spu_serial') | list }}"
    spu_ips: "{{ groups.servers | map('extract', hostvars, 'spu_address') | list }}"
  register: result

- name: Prepare create nPod input data
  ansible.builtin.set_fact:
    spus: "{{ spus | default([]) + [dict\
            (spu_serial=item[0],\
            ip_info_config=[dict(address=item[1],\
              bond_mode=bond_mode,\
              interfaces=interfaces,\
              netmask_bits=netmask_bits,\
              bond_transmit_hash_policy=bond_transmit_hash_policy,\
              bond_lacp_transmit_rate=bond_lacp_transmit_rate)])] }}"
  loop: "{{ spu_serials | zip(spu_ips) | list }}"

- name: Verify SPUs not part of any existing nPod
  nebulon.nebulon_on.neb_spu_info:
    spu_serials: "{{ spu_serials }}"
    not_in_npod: true
  register: npod_spus

- name: Create nPod
  nebulon.nebulon_on.neb_npod:
    name: "{{ npod_name }}"
    npod_group_uuid: "{{ npod_group_uuid }}"
    spus: "{{ spus }}"
    npod_template_uuid: "{{ npod_template_uuid }}"
    note: "{{ npod_note }}"
    timezone: "{{ timezone }}"
    ignore_warnings: true
    state: "{{ npod_state }}"
  register: npod_data
  when: npod_spus.spus[0].serial is defined

- name: Mark if reboot is needed
  ansible.builtin.set_fact:
    reboot_required: "{{ npod_data.changed }}"
